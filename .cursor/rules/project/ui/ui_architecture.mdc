---
description: 
globs: **/ui/**/*.dart
alwaysApply: false
---
### 3. The presentation layer (VIEW)
- This is the last layer that will display the data to the user.
- It relies on repositories to get the data or do any other actions.
- our view will listen to an immutable state object from the Riverpod notifier
- view can trigger actions that will update the state object

Example of page notifier 

```dart
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:demo_flutter_cursor/modules/feedbacks/models/feedback_state.dart';

part 'feedback_page_notifier.g.dart';

@Riverpod(keepAlive: false)
class FeedbackPageNotifier extends _$FeedbackPageNotifier {
  @override
  Future<FeebackPageState> build() async {
    final featureRequestRepository = ref.read(featureRequestRepositoryProvider);
    final userState = ref.read(userStateNotifierProvider);

    final userVotes = await featureRequestRepository.getUserVotes(userState.user.idOrThrow);
    final features = await featureRequestRepository.getActiveFeatureRequests();
    features.sort((a, b) => b.votes.compareTo(a.votes));

    return FeebackPageState(
      featureRequests: features,
      userVotes: userVotes,
    );
  }
}
```
- The notifier state is using freezed for immutability 
- it will be located in module folder then > providers 

We will then use this notifier within our page using "ref.watch(feedbackPageNotifierProvider);"

Here is an example of page
```dart
import 'package:demo_flutter_cursor/core/ui/theme/extensions/theme_extension.dart';
import 'package:demo_flutter_cursor/core/ui/widgets/responsive_layout.dart';
import 'package:demo_flutter_cursor/i18n/translations.g.dart';
import 'package:demo_flutter_cursor/modules/feedbacks/providers/feedback_page_notifier.dart';
import 'package:demo_flutter_cursor/modules/feedbacks/ui/widgets/add_feature_button.dart';
import 'package:demo_flutter_cursor/modules/feedbacks/ui/widgets/feature_card.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class FeedbackPage extends ConsumerWidget {
  const FeedbackPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final state = ref.watch(feedbackPageNotifierProvider);
    final translations = Translations.of(context).feature_requests;

    return Scaffold(
      backgroundColor: context.colors.background,
      body: SafeArea(
        child: LargeLayoutContainer(
          child: CustomScrollView(
            slivers: [
              state.map(
                data: (data) {
                  if (data.value.featureRequests.isEmpty) {
                    return SliverToBoxAdapter(
                      child: Padding(
                        padding: const EdgeInsets.fromLTRB(24, 16, 24, 16),
                        child: Text(
                          "No feature requests yet",
                          textAlign: TextAlign.center,
                          style: context.textTheme.bodyMedium?.copyWith(
                            fontWeight: FontWeight.w300,
                            color: context.colors.onBackground
                                .withValues(alpha: 0.6),
                          ),
                        ),
                      ),
                    );
                  }
                  return SliverList.separated(
                    itemBuilder: (context, index) => Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 24.0),
                      child: FeatureCard(
                        title: data.value.featureRequests[index].title,
                        description:
                            data.value.featureRequests[index].description,
                        votes: data.value.featureRequests[index].votes,
                        onVote: () {
                          ref
                              .read(feedbackPageNotifierProvider.notifier)
                              .vote(data.value.featureRequests[index]);
                        },
                        voted: data.value.hasVoted(
                          data.value.featureRequests[index],
                        ),
                      ),
                    ),
                    separatorBuilder: (context, index) => const SizedBox(
                      height: 12,
                    ),
                    itemCount: data.value.featureRequests.length,
                  );
                },
                error: (error) => SliverFillRemaining(
                  child: Center(
                    child: Text(error.error.toString()),
                  ),
                ),
                loading: (data) {
                  return const SliverFillRemaining(
                      child: Center(
                        child: CircularProgressIndicator(),
                      ),
                    );
                },
              ),
              const SliverToBoxAdapter(
                child: SizedBox(height: 100),
              )
            ],
          ),
        ),
      ),
    );
  }
}
```

- for each new files don't forget to add required imports