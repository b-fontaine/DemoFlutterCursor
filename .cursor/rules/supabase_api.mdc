---
description: Flutter Supabase and Postgres API class rules
globs: **/*_api.dart
alwaysApply: false
---
This layer is responsible for fetching data from any source.
It is also responsible for parsing and serialization.

Depending on if you are using a server, Firebase or Supabase you will have different classes in this layer.
This is also where we will request data to the secured storage or any other native plugin.

This is the only layer that isn't in our unit tests.

Here is an example of a flutter and Supabase API class

- use flutter_riverpod provider to create a provider of api
- name your api like "ExampleApi" 
- name your provider like "exampleApiProvider"

```dart
import 'package:demo_flutter_cursor/core/data/api/base_api_exceptions.dart';
import 'package:demo_flutter_cursor/modules/onboarding/api/entities/user_info_entity.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logger/logger.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

final exampleApiProvider = Provider(
  (ref) => ExampleApi(
    client: Supabase.instance.client,
  ),
);

const _kExampleTable = 'user_infos';

class ExampleApi {
  final SupabaseClient _client;
  final Logger _logger = Logger();

  ExampleApi({
    required SupabaseClient client,
  }) : _client = client;

  Future<List<UserInfoEntity>> getAll(String userId) async {
    try {
      final res = await _client
          .from(_kExampleTable) //
          .select()
          .eq('user_id', userId);
      if (res.isEmpty) {
        return [];
      }
      return res
          .map((e) => UserInfoEntity.fromJson(e)) //
          .toList();
    } catch (e) {
      _logger.e(e);
      throw ApiError(
        code: 0,
        message: '$e',
      );
    }
  }

  Future<UserInfoEntity?> getByKey(String userId, String key) async {
    try {
      final res = await _client
          .from(_kExampleTable) //
          .select()
          .eq('user_id', userId)
          .eq('info_key', key);
      if (res.isEmpty) {
        return null;
      }
      return UserInfoEntity.fromJson(res.first);
    } catch (e) {
      _logger.e(e);
      throw ApiError(
        code: 0,
        message: '$e',
      );
    }
  }

  Future<void> create(String userId, UserInfoEntity info) async {
    try {
      await _client.from(_kExampleTable).insert(info.toJson());
    } catch (e) {
      _logger.e(e);
      throw ApiError(
        code: 0,
        message: '$e',
      );
    }
  }

  Future<void> update(String userId, UserInfoEntity info) async {
    try {
      await _client
          .from(_kExampleTable) //
          .update(info.toJson()..remove('id'))
          .eq('id', info.id!);
    } catch (e) {
      _logger.e(e);
      throw ApiError(
        code: 0,
        message: '$e',
      );
    }
  }
}
```

