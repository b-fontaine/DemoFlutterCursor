---
description: Use when you need to add or modify page routing 
globs: 
alwaysApply: false
---
# Routing Guidelines

- Add "routing applied" at the beginning of the chat message.

## Overview
- The application uses Go Router for navigation
- Routes are defined in the `router.dart` file using the GoRouter class
- A Riverpod provider `goRouterProvider` makes the router available throughout the app
- The router is generated using the `generateRouter()` function

## Page Configuration
- Each page must have a static `routeName` field that defines its route name
- Page class names should follow the pattern `[Feature]Page` (e.g., `SignupPage`, `HomePage`)
- The route path should match the `routeName` (e.g., `/${SignupPage.routeName}`)

## Adding a New Page
1. Create the page widget class with a static `routeName` constant:
```dart
class ExamplePage extends StatelessWidget {
  static const routeName = 'example';
  
  const ExamplePage({Key? key}) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    // Page implementation
  }
}
```

2. Add a new route in the `router.dart` file:
```dart
GoRoute(
  name: ExamplePage.routeName,
  path: '/${ExamplePage.routeName}',
  builder: (context, state) => const ExamplePage(),
),
```

3. Import the page in the `router.dart` file:
```dart
import 'package:demo_flutter_cursor/modules/feature/example_page.dart';
```

## Protected Routes
- For authenticated-only routes, wrap the page with `AuthenticatedGuard`:
```dart
GoRoute(
  name: ProtectedPage.routeName,
  path: '/${ProtectedPage.routeName}',
  builder: (context, state) => const AuthenticatedGuard(
    fallbackRoute: '/signin',
    child: ProtectedPage(),
  ),
),
```

## Route Parameters
- To add route parameters, use the GoRouter parameter syntax:
```dart
GoRoute(
  name: DetailPage.routeName,
  path: '/${DetailPage.routeName}/:id',
  builder: (context, state) => DetailPage(id: state.params['id']!),
),
```

## Nested Routes
- To create nested routes, use the `routes` parameter of GoRoute:
```dart
GoRoute(
  name: FeaturePage.routeName,
  path: '/${FeaturePage.routeName}',
  builder: (context, state) => const FeaturePage(),
  routes: [
    GoRoute(
      name: FeatureDetailPage.routeName,
      path: 'detail/:id',
      builder: (context, state) => FeatureDetailPage(id: state.params['id']!),
    ),
  ],
),
```

## Navigation
- To navigate to a route, use:
```dart
// Using GoRouter extension
ref.goRouter.go('/${RouteName.routeName}');

// Or with context
GoRouter.of(context).go('/${RouteName.routeName}');
```

- prefer using the GoRouter extension to get GoRouter reference.

## Error Handling
- The app has a default 404 page defined in `PageNotFound` widget
- All undefined routes redirect to this page automatically
