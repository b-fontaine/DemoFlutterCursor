---
description: Describe how to manage DTO classes creation, usage and modifications.
globs: 
alwaysApply: false
---
# DTO Creation Guidelines

## General Structure

DTO (data transfer objects) represent data from external sources (mostly API). They are used to serialize and deserialize data.

## Naming Conventions
- Name entities with the suffix `DTO` (e.g., `UserDTO`, `DeviceDTO`)
- Store DTO files in the appropriate directory: `lib/core/data/api/dto/` for core DTOs or `lib/modules/{module_name}/data/api/dto/` for module-specific DTOs
- Name the file with the DTO name in snake_case (e.g., `user_dto.dart`, `device_dto.dart`)

## Implementation Guidelines

### 1. Use @freezed Annotation
- Use the `@freezed` annotation from the `freezed_annotation` package for immutability and code generation
- Add the appropriate part statements:
  ```dart
  part '{dto_name}.freezed.dart';
  part '{dto_name}.g.dart';
  ```

### 2. Structure of DTO Classes
- Create a sealed class with the `_$DTOName` mixin
- Implement a factory constructor with all required fields
- Implement a private constructor using `const DTOName._();`
- Add appropriate JsonKey annotations for field mapping:
  ```dart
  @JsonKey(name: 'field_name_in_json')
  @JsonKey(includeIfNull: false)
  ```
- Use appropriate converters for special types (e.g., DateTime):
  ```dart
  @TimestampConverter()
  DateTime? creationDate,
  ```

### 3. JSON Serialization
- Implement a `fromJson` factory method that handles ID field mapping:
  ```dart
  factory DTOName.fromJson(String id, Map<String, dynamic> json) =>
      _$DTONameFromJson(json..['id'] = id);
  ```

### 4. Custom Methods (When Needed)
- Add custom serialization/deserialization methods if needed (e.g., for shared preferences)
- Implement equality operators and hashCode if not using @freezed

## Type Definitions
- Use enums for fields with a fixed set of values
- Define enums with JsonValue annotations:
  ```dart
  enum OperatingSystem {
    @JsonValue('ios')
    ios,
    @JsonValue('android')
    android,
  }
  ```

## Best Practices
- Keep DTOs focused on data representation only
- Don't include business logic in DTOs
- Include only fields that come from or are sent to external sources
- Use nullable types when appropriate with `?` suffix
- Use consistent naming and style across all DTOs
- Properly document fields with non-obvious meaning

## Example DTO

An DTO example can be found here [exemple_dto.dart](mdc:.cursor/rules/templates/exemple_dto.dart)

