---
description: 
globs: **/tasks/*.md
alwaysApply: false
---
- Add "task_management applied" at the beginning of the chat message.

## Required files and folders
  - .status/tasks: Current development tasks and requirements, source of tasks definitions
  - [status.md](mdc:.status/status.md) : Project progress and state
  
## TDD-focused Workflow Steps
  1. Read task requirements, divide the task by "steps", extract acceptance criteria and identify dependencies.
  2. Update [status.md](mdc:.status/status.md) to mark the corresponding task as "In progress". If the task is not mentioned in @status.md, add it.
  3. Always begin with tasks defining the domain layer, using [domain_layer.mdc](mdc:.cursor/rules/project/domain_layer.mdc) rules. 
  
  5. Then, handle tasks for the data layer, using [data_layer.mdc](mdc:.cursor/rules/project/data_layer.mdc) rules.
  6. Implement repositories using TDD. Repository tests must be unit test and NOT widget tests.
  7. At last, handle tasks for the UI layer, using [ui_layer.mdc](mdc:.cursor/rules/project/ui_layer.mdc) rules.
  8. Implement state notifier using TDD. State notifier tests must be widget tests.
  
  
  3. **RED PHASE**:
     - Create test files for ALL interfaces (repository tests, use case tests, etc.)
     - Write ALL test cases with expected behaviors
     - Run tests to verify they FAIL (as there's no implementation yet)
     - Commit changes with "TDD: RED phase - [Component] tests"
  
  4. **GREEN PHASE**:
     - Implement minimal versions of interfaces to make tests pass
     - Run tests frequently to track progress
     - When all tests pass, commit with "TDD: GREEN phase - [Component] implementation"
  
  5. **REFACTOR PHASE**:
     - Refine implementations while keeping tests green
     - Optimize code, improve readability
     - Add documentation and comments
     - Run tests again to ensure everything still works
     - Commit with "TDD: REFACTOR phase - [Component] code improvements"
  
  6. Implement UI components and widget tests following the same TDD approach
  7. Verify all acceptance criteria are met through tests
  8.  Update [status.md](mdc:.status/status.md) to mark the corresponding task as "Completed".

## Validation Checklist Before Marking Task Complete
- [ ] All domain models, repositories, and use cases have corresponding test files
- [ ] All tests are passing
- [ ] Tests cover all acceptance criteria from requirements
- [ ] Tests include edge cases and error scenarios
- [ ] Code follows project architecture and style guidelines
- [ ] TDD approach was followed: tests written before implementation